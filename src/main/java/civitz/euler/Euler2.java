package civitz.euler;

import java.util.stream.*;

/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

*/
class Euler2 extends EulerProblem<Integer> {
	int number() {
		return 2;
	}

	Integer calculate() {
		return Stream.iterate(new Fib(0, 1), Fib::next)
                .takeWhile(fib -> fib.current <= 1000)
                .filter(fib -> fib.current % 2 == 0)
                .collect(Collectors.summingInt(fib -> fib.current));
    }

	static class Fib {
		final int current;
		final int prev;

		Fib(int prev, int current) {
			this.current = current;
			this.prev = prev;
		}

		Fib next() {
			return new Fib(current, current + prev);
		}
	}
}